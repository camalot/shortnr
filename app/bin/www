require('dotenv').config();

const hbs = require('hbs');
const LogsMongoClient = require('../api/mongo/Logs');
const config = require('../config');
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const routes = require('../routes/index');
const ui = require('../api/middleware/ui');

const app = express();
const logger = new LogsMongoClient();

app.set('view engine', 'hbs');
app.set('views', path.join(path.resolve(), 'views'));
require('../api/hbs/xif');
require('../api/hbs/sections');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(express.static(path.join(path.resolve(), 'assets')));

app.get('/', ui.allow, (req, res) => {
  return res.render('index', { title: 'Shortnr', config });
})

app.get('/', (req, res) => {
  return res.sendStatus(404);
});

app.use('/', routes);

app.use(
  require('../libs/express/handlers/FileNotFoundHandler')("Page Not Found", 404)
);

// 500 error handler
app.use(
  require('../libs/express/handlers/ErrorHandler')()
);

module.exports = app;

function normalizePort(value) {
  const port = parseInt(value, 10);
  if (isNaN(port)) {
    return value;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

// const port = parseInt(process.env.PORT || '3000', 10) || 3000;
const port = normalizePort(process.env.PORT || '3000') || 3000;
app.listen(port, async () => {
  await logger.info('shortnr.bin.www', `shortnr listening â†’ ':${port}'`);
});
app.on("error", async (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('shortnr.bin.www', bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error('shortnr.bin.www', bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
